#!groovy
// The above triggers groovy syntax highlighting in vim

apply plugin: "groovy"
apply plugin: "maven"
apply plugin: "idea"
apply plugin: "eclipse"

//archiveBaseName = "properties-plugin"
version = "1.2.2"
group = "net.saliman"
archivesBaseName = "gradle-data-extractor-plugin"
def mavenRepoUploadUrl = "scp://maxdevcloud/var/www/maven/repo"
def mavenRepoUploadUser = "git"

repositories {
	mavenCentral() 
}

configurations {
	archives
}

dependencies {
	compile localGroovy()
	compile gradleApi()
	archives "org.apache.maven.wagon:wagon-ssh:3.3.2"
	archives "org.apache.maven.wagon:wagon-ssh-external:3.3.2"
}

task sourceJar(type: Jar) {
	description = "An archive of the source code for Maven Central"
	classifier = "sources"
	from sourceSets.main.groovy
}

task groovydocJar(type: Jar) {
	description = "An archive of the GroovyDocs for Maven Central"
	classifier = 'javadoc'
	from groovydoc
}

artifacts {
    archives jar, groovydocJar, sourceJar
}

uploadArchives {
	doFirst {
		repositories {
			mavenDeployer {
				configuration = configurations.archives
				repository(url: mavenRepoUploadUrl) {
					authentication(userName: mavenRepoUploadUser,
								   privateKey: file("${privateKeyFile}"),
								   passphrase: "${privateKeyPassphrase}")
				}
			}
		}
	}
}

def getPomConfiguration() {
	return {
		name 'Gradle Data Extractor Plugin'
		packaging 'jar'
		description 'A Gradle plugin for extracting test data from a database to a SQL file.'
		url 'https://github.com/stevesaliman/gradle-data-extractor-plugin'
		licenses {
			license {
				name 'The Apache Software License, Version 2.0'
				url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
				distribution 'repo'
			}
		}
		developers {
			developer {
				id 'stevesaliman'
				name 'Steven C. Saliman'
				email 'support@saliman.net'
			}
		}
		scm {
			connection 'scm:https://stevesaliman@github.com/stevesaliman/gradle-data-extractor-plugin'
			developerConnection 'scm:git@github.com:stevesaliman/gradle-data-extractor-plugin.git'
			url 'https://github.com/stevesaliman/gradle-data-extractor-plugin'
		}
	}
}

idea {
	module {

		//if you prefer different output folders
		inheritOutputDirs = true
		outputDir = file('build/idea/out')
		testOutputDir = file('build/idea/testOut')
		//if you love browsing Javadoc
		downloadJavadoc = true
		//and hate reading sources :)
		downloadSources = false
	}
}

// If we are going to upload, make sure we've got what we need to do it before
// we start the build..
gradle.taskGraph.whenReady { taskGraph ->
	if ( taskGraph.allTasks.find { it.name == "uploadArchives" } != null ) {
		if ( !project.hasProperty("privateKeyFile") ) {
			throw new MissingPropertyException("No privateKeyFile given")
		}

		if ( !project.hasProperty("privateKeyPassphrase") ) {
			throw new MissingPropertyException("No privateKeyPassphrase given")
		}
	}
}

